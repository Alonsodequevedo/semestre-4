import java.util.Scanner;

class Queue {
    private int[] array;
    private int front, rear, size, capacity;

    public Queue(int capacity) {
        this.capacity = capacity;
        this.array = new int[capacity];
        this.front = this.size = 0;
        this.rear = capacity - 1;
    }

    public boolean isFull() {
        return size == capacity;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public void enqueue(int item) {
        if (isFull()) return;
        rear = (rear + 1) % capacity;
        array[rear] = item;
        size++;
    }

    public int dequeue() {
        if (isEmpty()) return Integer.MIN_VALUE;
        int item = array[front];
        front = (front + 1) % capacity;
        size--;
        return item;
    }
}

class Stack {
    private int[] array;
    private int top;
    private int capacity;

    public Stack(int capacity) {
        this.capacity = capacity;
        this.array = new int[capacity];
        this.top = -1;
    }

    public boolean isFull() {
        return top == capacity - 1;
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public void push(int item) {
        if (isFull()) return;
        array[++top] = item;
    }

    public int pop() {
        if (isEmpty()) return Integer.MIN_VALUE;
        return array[top--];
    }
}

class StackString {
    private char[] array;
    private int top;

    public StackString(int capacity) {
        this.array = new char[capacity];
        this.top = -1;
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public void push(char item) {
        array[++top] = item;
    }

    public char pop() {
        return isEmpty() ? '\0' : array[top--];
    }
}

public class Main {
    public static String reverseString(String str) {
        StackString stack = new StackString(str.length());
        for (char c : str.toCharArray()) {
            stack.push(c);
        }
        StringBuilder reversed = new StringBuilder();
        while (!stack.isEmpty()) {
            reversed.append(stack.pop());
        }
        return reversed.toString();
    }

    public static boolean isPalindrome(String str) {
        str = str.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
        return str.equals(reverseString(str));
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        Queue queue = new Queue(5);
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        System.out.println("Elemento eliminado de la cola: " + queue.dequeue());

        Stack stack = new Stack(5);
        stack.push(10);
        stack.push(20);
        stack.push(30);
        System.out.println("Elemento eliminado de la pila: " + stack.pop());

        System.out.print("Ingrese una palabra: ");
        String original = scanner.nextLine();
        String reversed = reverseString(original);
        System.out.println("Palabra invertida: " + reversed);
        System.out.println("¿Es un palíndromo?: " + (isPalindrome(original) ? "Sí" : "No"));
        
        scanner.close();
    }
}
